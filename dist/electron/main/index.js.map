{"version":3,"file":"index.js","sources":["../../../src/entity/User.ts","../../../src/data-source.ts","../../../electron/main/index.ts"],"sourcesContent":["import { Entity, PrimaryGeneratedColumn, Column, BaseEntity } from \"typeorm\"\n\n@Entity()\nexport class User extends BaseEntity{\n\n    @PrimaryGeneratedColumn()\n    id: number\n\n    // ColumnTypeUndefinedError: Column type for User#firstName is not defined and cannot be guessed\n    ///// fixed after adding column type\n    /// [ @Column('text',{nullable:true}) ]\n    @Column('text')\n    firstName: string\n\n    @Column('text')\n    lastName: string\n\n    @Column('text')\n    age: number\n\n}\n","import \"reflect-metadata\";\nimport { DataSource } from \"typeorm\";\nimport { User } from \"./entity/User\";\nimport { join } from \"path\";\n\nfunction createConnection() {}\n\nconst AppDataSource = new DataSource({\n    type: \"sqlite\",\n    database: \"eshop.sqlite\",\n    // entities: [join('src', 'entity/*.{ts}')],\n    synchronize: true,\n    logging: true,\n    entities: [User],\n    migrations: [],\n    subscribers: [],\n});\n\n// AppDataSource.initialize();\n\nexport default AppDataSource;\n","import { app, BrowserWindow, shell, ipcMain } from \"electron\";\nimport { release } from \"os\";\nimport { join } from \"path\";\nimport AppDataSource from \"../../src/data-source\";\nimport { User } from \"../../src/entity\";\n\n// Disable GPU Acceleration for Windows 7\nif (release().startsWith(\"6.1\")) app.disableHardwareAcceleration();\n\n// Set application name for Windows 10+ notifications\nif (process.platform === \"win32\") app.setAppUserModelId(app.getName());\n\nif (!app.requestSingleInstanceLock()) {\n  app.quit();\n  process.exit(0);\n}\n\nprocess.env[\"ELECTRON_DISABLE_SECURITY_WARNINGS\"] = \"true\";\n\nexport const ROOT_PATH = {\n  // /dist\n  dist: join(__dirname, \"../..\"),\n  // /dist or /public\n  public: join(__dirname, app.isPackaged ? \"../..\" : \"../../../public\"),\n};\n\nlet win: BrowserWindow | null = null;\n// Here, you can also use other preload\nconst preload = join(__dirname, \"../preload/index.js\");\nconst url = process.env.VITE_DEV_SERVER_URL;\nconst indexHtml = join(ROOT_PATH.dist, \"index.html\");\n\nasync function createWindow() {\n  win = new BrowserWindow({\n    title: \"Main window\",\n    icon: join(ROOT_PATH.public, \"favicon.svg\"),\n    webPreferences: {\n      contextIsolation: true,\n      preload,\n      nodeIntegration: true,\n      // contextIsolation: false,\n    },\n  });\n\n  if (app.isPackaged) {\n    win.loadFile(indexHtml);\n  } else {\n    win.loadURL(url);\n    // win.webContents.openDevTools()\n  }\n\n  // Test actively push message to the Electron-Renderer\n  win.webContents.on(\"did-finish-load\", () => {\n    win?.webContents.send(\"main-process-message\", new Date().toLocaleString());\n  });\n\n  // Make all links open with the browser, not with the application\n  win.webContents.setWindowOpenHandler(({ url }) => {\n    if (url.startsWith(\"https:\")) shell.openExternal(url);\n    return { action: \"deny\" };\n  });\n}\n\napp.whenReady().then(()=>{\n  AppDataSource.initialize().then(async () => {\n\n    console.log(\"Inserting a new user into the database...\", __dirname)\n    const user = new User()\n    user.firstName = \"Timber\"\n    user.lastName = \"Saw\"\n    user.age = 25\n    await AppDataSource.manager.save(user)\n    console.log(\"Saved a new user with id: \" + user.id)\n\n    console.log(\"Loading users from the database...\")\n    const users = await AppDataSource.manager.find(User)\n    console.log(\"Loaded users: \", users)\n\n    console.log(\"Here you can setup and run express / fastify / any other framework.\")\n\n}).catch(error => console.log('Database Error', error))\n  createWindow();\n});\n\napp.on(\"window-all-closed\", () => {\n  win = null;\n  if (process.platform !== \"darwin\") app.quit();\n});\n\napp.on(\"second-instance\", () => {\n  if (win) {\n    // Focus on the main window if the user tried to open another\n    if (win.isMinimized()) win.restore();\n    win.focus();\n  }\n});\n\napp.on(\"activate\", () => {\n  const allWindows = BrowserWindow.getAllWindows();\n  if (allWindows.length) {\n    allWindows[0].focus();\n  } else {\n    createWindow();\n  }\n});\n\nipcMain.on(\"ipc-example\", async (event, arg) => {\n  const msgTemplate = (pingPong: string) => `IPC test: ${pingPong}`;\n  console.log(msgTemplate(arg));\n  event.reply(\"ipc-example\", msgTemplate(\"pong\"));\n});\n\n// new window example arg: new windows url\nipcMain.handle(\"open-win\", (event, arg) => {\n  const childWindow = new BrowserWindow({\n    webPreferences: {\n      preload,\n    },\n  });\n\n  if (app.isPackaged) {\n    childWindow.loadFile(indexHtml, { hash: arg });\n  } else {\n    childWindow.loadURL(`${url}/#${arg}`);\n    // childWindow.webContents.openDevTools({ mode: \"undocked\", activate: true })\n  }\n});\n"],"names":["BaseEntity","PrimaryGeneratedColumn","Column","Entity","DataSource","release","app","join","BrowserWindow","url","shell","ipcMain"],"mappings":"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"}